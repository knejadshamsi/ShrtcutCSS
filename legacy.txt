find = {}
CSS_list = []
str_soup = str(soup).replace("\n", "").replace(" ", "")
for sp_one in str_soup.split('{'):
    for sp_two in sp_one.split('}'):
        if len(sp_two) > 1:
            CSS_list.append(sp_two)

# print(CSS_list)
i = 0
while i < len(CSS_list):
    properties_list = []
    properties_dict = {}
    y = 0
    for p_sp_one in CSS_list[i + 1].split(";"):
        if len(p_sp_one) > 1:
            for p_sp_two in p_sp_one.split(":"):
                properties_list.append(p_sp_two)

    while y < len(properties_list):
        properties_dict[properties_list[y]] = properties_list[y + 1]
        y = y + 2

    CSS_list[i + 1] = properties_dict
    find[CSS_list[i]] = CSS_list[i + 1]
    i = i + 2

print(find)
# print(find["#other"]["color"])

# END : CSS PARSER
# START : DICT TO CSS
dict_to_css = ""
for selector in find:
    properties = str(find.get(selector)).replace(",", ";\n  ").replace("'", "").replace("{", "").replace("}", "")
    dict_to_css = dict_to_css + selector + " {" + "\n   " + properties + ";\n" + "}" + "\n"

print(dict_to_css)
# END : DICT TO CSS

# attr extraction
target_css_file = open("test.html", encoding='utf8')
soup2 = BeautifulSoup(target_css_file, 'html.parser')

attr_list = list(soup2.div.attrs.keys())
scc_index = attr_list.index("scc")
print(attr_list[scc_index:])
print(attr_list[scc_index+1:])


#find elements that havc scc
print(soup2.select("[scc]"))

def test():
    print("this works!")

for el in "ferdwsD":
    match el:
        case "f": test()
        case "e": print("H")
        case "r": print("I")
        case "d": print("S")
        case _: print(el)


for el in soup2.find_all("div"):
    print(el)
    if el.has_attr("class"):
        print("true")
    if len(el["class"])>0:
        print("true")
    else:
        print("false")
    if el.has_attr("class") and len(el["class"])>0:
        print("true")


# find the scc and proccess classes
# def class_handler(file, genmode):
# html_file = open(file, encoding='utf8')
# soup = BeautifulSoup(html_file, 'html.parser')
# scc_els = soup.select("[scc]")
# if scc_els:
# for el in scc_els:
# if (len(el.attrs['class'])) < 1:
# el.attrs['class'] = random_class_name(el.name, genmode)
# with open("test.html", "w") as file:
# file.write(str(soup))




#old backup:


# ***** doing the scc stuff
def scc_interpreter(css_class, props, css_dict):
    props_list = props.split("-")
    if props_list[0] == "size":
        dem = props_list[1].split("x")
        for demi, value in {"width": dem[0], "height": dem[1]}.items():
            match value:
                case "full":
                    css_dict[f".{css_class}"].update({f"{demi}": "100vw"})
                case "fill":
                    css_dict[f".{css_class}"].update({f"{demi}": "100%"})
                case _:
                    css_dict[f".{css_class}"].update({f"{demi}": dem[0] + props_list[2]})

        # print(css_dict)
    elif props_list[0] == "color":
        for colors, value in {"background": props_list[1], "color": props_list[2]}.items():
            if value[0:4] == "grad":
                # match value:
                # case "" :
                print("hi")
            else:
                # match value:
                # case "red":
                # case "blue":
                # case "green":
                # case "black":
                # case "white":
                print("bye")
        # color = props_list[1].split("&")

    # print(props[2:4])


def scc_parser(css_class, list, css_dict):
    # print("css_class is " + str(css_class))
    # print("list is" + str(list))
    # print("properties are " + str(css_dict[f".{css_class}"]))
    for props in list:
        scc_interpreter(css_class, props, css_dict)


def class_parser(file, css_file):
    html_file = BeautifulSoup(open(file, encoding='utf8'), 'html.parser')
    css_parsed = css_parser(css_file)
    for el in html_file.select("[class]"):
        if len(el.attrs["scc"]) > 1:
            scc_parser(el.attrs["class"][0], el.attrs["scc"].split(" "), css_parsed)


def scc_el_finder(file):
    html_file = BeautifulSoup(open(file, encoding='utf8'), 'html.parser')
    for el in html_file.select("[scc]"):
        class_handler(el)
        full_attr_list = list(el.attrs.keys())
        scc_index = full_attr_list.index("scc")
        attr_list = full_attr_list[scc_index + 1:]
        for order in attr_list[0]:
            match order:
                case "S":
                    size_inter(class_name, prop)
                case "C":
                    color_inter(class_name, prop)


#old class handler

def class_handler(file, genmode):
    html_file = BeautifulSoup(open(file, encoding='utf8'), "html5lib")
    print(html_file)
    for el in html_file.select("[scc]"):
        if not (el.has_attr("class") and len(el["class"]) > 0):
            el.attrs['class'] = random_class_name(el.name, genmode)

    with open("test.html", "w") as file:
        file.write(str(html_file))



# ***** old
def scc_interpreter(file, css_dict):
    html_file = BeautifulSoup(open(file, encoding='utf8'), 'html.parser')
    for el in html_file.select("[scc]"):
        el_class_name = "." + el["class"][0]
        el_full_attr_list = list(el.attrs.keys())
        scc_index = el_full_attr_list.index("scc")
        attr_list = el_full_attr_list[scc_index + 1:]
        i = 0
        for order in attr_list[0]:
            i = i + 1
            if i < len(attr_list):
                match order:
                    case "S": size_inter(el_class_name, attr_list[i], css_dict)
                    case "C": color_inter(el_class_name, attr_list[i], css_dict)
                    case "P": position_inter(el_class_name, attr_list[i], css_dict)
            else:
                break
    return css_dict

# old dict adding

test_dict = {'#test': {'width': '100%', 'color': 'black'}, '#other': {'width': '90%', 'color': 'white'}}

#if "#other" in test_dict:
    #if len(test_dict["#other"]) > 0:
        #test_dict["#other"].update({"hey":"hi"})
    #else:
        #test_dict["#other"] = {"hey": "hi"}
#else:
    #test_dict["#other"] = {"hey":"hi"}

#print(test_dict)